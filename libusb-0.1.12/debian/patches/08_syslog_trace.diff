Index: libusb-0.1.12/linux.c
===================================================================
--- libusb-0.1.12.orig/linux.c	2012-09-20 13:26:08.463715604 +0200
+++ libusb-0.1.12/linux.c	2012-09-20 14:57:00.675702366 +0200
@@ -14,6 +14,7 @@
 #include <errno.h>
 #include <sys/time.h>
 #include <dirent.h>
+#include <syslog.h>
 
 #include "linux.h"
 #include "usbi.h"
@@ -68,6 +69,8 @@
     USB_ERROR_STR(-errno, "could not set config %d: %s", configuration,
 	strerror(errno));
 
+  syslog(LOG_DEBUG, "%s: dev=%s conf=%d", "usb_set_configuration", dev->device->filename, configuration);
+
   dev->config = configuration;
 
   return 0;
@@ -86,6 +89,8 @@
 	strerror(errno));
   }
 
+  syslog(LOG_DEBUG, "%s: dev=%s iface=%d", "usb_claim_interface", dev->device->filename, interface);
+
   dev->interface = interface;
 
   return 0;
@@ -100,6 +105,8 @@
     USB_ERROR_STR(-errno, "could not release intf %d: %s", interface,
     	strerror(errno));
 
+  syslog(LOG_DEBUG, "%s: dev=%s iface=%d", "usb_release_interface", dev->device->filename, interface);
+
   dev->interface = -1;
 
   return 0;
@@ -121,11 +128,29 @@
     USB_ERROR_STR(-errno, "could not set alt intf %d/%d: %s",
 	dev->interface, alternate, strerror(errno));
 
+  syslog(LOG_DEBUG, "%s: dev=%s iface=%d alt=%d", "usb_set_altinterface", dev->device->filename, dev->interface, alternate);
+
   dev->altsetting = alternate;
 
   return 0;
 }
 
+static char *aget_hexstr(const char *const bytes, const size_t size)
+{
+	char *hexstr;
+	char *hexstr_ptr;
+	int i;
+
+	hexstr = calloc(3 * size + 1, sizeof(char));
+	hexstr_ptr = hexstr;
+
+	for (i = 0; i < size; ++i) {
+		hexstr_ptr += sprintf(hexstr_ptr, "%02hhX ", bytes[i]);
+	}
+
+	return hexstr;
+}
+
 /*
  * Linux usbfs has a limit of one page size for synchronous bulk read/write.
  * 4096 is the most portable maximum we can do for now.
@@ -153,6 +178,15 @@
   if (ret < 0)
     USB_ERROR_STR(-errno, "error sending control message: %s", strerror(errno));
 
+  syslog(LOG_DEBUG, "%s: dev=%s reqt=%d req=%d val=%d ix=%d s=%d t=%d r=%d", "usb_control_msg", dev->device->filename,
+	 requesttype, request, value, index, size, timeout, ret);
+  if (ret >= 0 && bytes) {
+	  char *hexstr;
+	  hexstr = aget_hexstr(bytes, ret);
+	  syslog(LOG_DEBUG, "%s", hexstr);
+	  free(hexstr);
+  }
+
   return ret;
 }
 
@@ -286,6 +320,7 @@
 int usb_bulk_write(usb_dev_handle *dev, int ep, const char *bytes, int size,
 	int timeout)
 {
+  syslog(LOG_DEBUG, "%s: dev=%s ep=%d", "usb_bulk_write", dev->device->filename, ep);
   /* Ensure the endpoint address is correct */
   return usb_urb_transfer(dev, ep, USB_URB_TYPE_BULK, (char *)bytes, size,
 		timeout);
@@ -294,6 +329,7 @@
 int usb_bulk_read(usb_dev_handle *dev, int ep, char *bytes, int size,
 	int timeout)
 {
+  syslog(LOG_DEBUG, "%s: dev=%s ep=%d", "usb_bulk_read", dev->device->filename, ep);
   /* Ensure the endpoint address is correct */
   ep |= USB_ENDPOINT_IN;
   return usb_urb_transfer(dev, ep, USB_URB_TYPE_BULK, bytes, size,
@@ -308,18 +344,44 @@
 int usb_interrupt_write(usb_dev_handle *dev, int ep, const char *bytes, int size,
 	int timeout)
 {
+  int ret;
+
   /* Ensure the endpoint address is correct */
-  return usb_urb_transfer(dev, ep, USB_URB_TYPE_INTERRUPT, (char *)bytes, size,
+  ret = usb_urb_transfer(dev, ep, USB_URB_TYPE_INTERRUPT, (char *)bytes, size,
 		timeout);
+
+  syslog(LOG_DEBUG, "%s: dev=%s ep=%d s=%d t=%d r=%d", "usb_interrupt_write", dev->device->filename,
+	 ep, size, timeout, ret);
+  if (ret >= 0 && bytes) {
+	  char *hexstr;
+	  hexstr = aget_hexstr(bytes, ret);
+	  syslog(LOG_DEBUG, "%s", hexstr);
+	  free(hexstr);
+  }
+
+  return ret;
 }
 
 int usb_interrupt_read(usb_dev_handle *dev, int ep, char *bytes, int size,
 	int timeout)
 {
+  int ret;
+
   /* Ensure the endpoint address is correct */
   ep |= USB_ENDPOINT_IN;
-  return usb_urb_transfer(dev, ep, USB_URB_TYPE_INTERRUPT, bytes, size,
+  ret = usb_urb_transfer(dev, ep, USB_URB_TYPE_INTERRUPT, bytes, size,
 		timeout);
+
+  syslog(LOG_DEBUG, "%s: dev=%s ep=%d s=%d t=%d r=%d", "usb_interrupt_read", dev->device->filename,
+	 ep, size, timeout, ret);
+  if (ret >= 0 && bytes) {
+	  char *hexstr;
+	  hexstr = aget_hexstr(bytes, ret);
+	  syslog(LOG_DEBUG, "%s", hexstr);
+	  free(hexstr);
+  }
+
+  return ret;
 }
 
 int usb_os_find_busses(struct usb_bus **busses)
@@ -666,6 +728,7 @@
     else
       fprintf(stderr, "usb_os_init: No USB VFS found, is it mounted?\n");
   }
+
 }
 
 int usb_resetep(usb_dev_handle *dev, unsigned int ep)
@@ -677,6 +740,8 @@
     USB_ERROR_STR(-errno, "could not reset ep %d: %s", ep,
     	strerror(errno));
 
+  syslog(LOG_DEBUG, "%s: dev=%s ep=%d", "usb_resetep", dev->device->filename, ep);
+
   return 0;
 }
 
@@ -689,6 +754,8 @@
     USB_ERROR_STR(-errno, "could not clear/halt ep %d: %s", ep,
     	strerror(errno));
 
+  syslog(LOG_DEBUG, "%s: dev=%s ep=%d", "usb_clear_halt", dev->device->filename, ep);
+
   return 0;
 }
 
@@ -700,6 +767,8 @@
   if (ret)
      USB_ERROR_STR(-errno, "could not reset: %s", strerror(errno));
 
+  syslog(LOG_DEBUG, "%s: dev=%s", "usb_reset", dev->device->filename);
+
   return 0;
 }
 
@@ -717,6 +786,8 @@
   strncpy(name, getdrv.driver, namelen - 1);
   name[namelen - 1] = 0;
 
+  syslog(LOG_DEBUG, "%s: dev=%s iface=%d name=%s", "usb_get_driver_np", dev->device->filename, interface, name);
+
   return 0;
 }
 
@@ -734,6 +805,8 @@
     USB_ERROR_STR(-errno, "could not detach kernel driver from interface %d: %s",
         interface, strerror(errno));
 
+  syslog(LOG_DEBUG, "%s: dev=%s iface=%d", "usb_detach_kernel_driver_np", dev->device->filename, interface);
+
   return 0;
 }
 
Index: libusb-0.1.12/usb.c
===================================================================
--- libusb-0.1.12.orig/usb.c	2012-09-20 13:26:08.139691851 +0200
+++ libusb-0.1.12/usb.c	2012-09-20 13:26:08.483673482 +0200
@@ -10,6 +10,7 @@
 #include <stdio.h>	/* stderr */
 #include <string.h>	/* strcmp */
 #include <errno.h>
+#include <syslog.h>
 
 #include "usbi.h"
 
@@ -21,6 +22,8 @@
   struct usb_bus *busses, *bus;
   int ret, changes = 0;
 
+  syslog(LOG_DEBUG, "%s", "usb_find_busses");
+
   ret = usb_os_find_busses(&busses);
   if (ret < 0)
     return ret;
@@ -91,6 +94,8 @@
   struct usb_bus *bus;
   int ret, changes = 0;
 
+  syslog(LOG_DEBUG, "%s", "usb_find_devices");
+
   for (bus = usb_busses; bus; bus = bus->next) {
     struct usb_device *devices, *dev;
 
@@ -189,6 +194,8 @@
 
 void usb_init(void)
 {
+  syslog(LOG_DEBUG, "%s", "usb_init");
+
   if (getenv("USB_DEBUG"))
     usb_set_debug(atoi(getenv("USB_DEBUG")));
 
@@ -199,6 +206,8 @@
 {
   usb_dev_handle *udev;
 
+  syslog(LOG_DEBUG, "%s", "usb_open");
+
   udev = malloc(sizeof(*udev));
   if (!udev)
     return NULL;
@@ -277,6 +286,8 @@
 {
   int ret;
 
+  syslog(LOG_DEBUG, "%s", "usb_close");
+
   ret = usb_os_close(dev);
   free(dev);
 
@@ -304,4 +315,3 @@
 {
   free(bus);
 }
-
