Index: libusb-0.1.12/linux.c
===================================================================
--- libusb-0.1.12.orig/linux.c	2012-09-14 11:18:22.618870004 +0300
+++ libusb-0.1.12/linux.c	2012-09-14 11:15:31.718900501 +0300
@@ -14,6 +14,7 @@
 #include <errno.h>
 #include <sys/time.h>
 #include <dirent.h>
+#include <syslog.h>
 
 #include "linux.h"
 #include "usbi.h"
@@ -25,6 +26,8 @@
   char filename[PATH_MAX + 1];
   int fd;
 
+  syslog(LOG_DEBUG, "%s", "device_open");
+
   snprintf(filename, sizeof(filename) - 1, "%s/%s/%s",
     usb_path, dev->bus->dirname, dev->filename);
 
@@ -41,6 +44,8 @@
 
 int usb_os_open(usb_dev_handle *dev)
 {
+  syslog(LOG_DEBUG, "%s", "usb_os_open");
+
   dev->fd = device_open(dev->device);
 
   return 0;
@@ -51,6 +56,8 @@
   if (dev->fd < 0)
     return 0;
 
+  syslog(LOG_DEBUG, "%s", "usb_os_close");
+
   if (close(dev->fd) == -1)
     /* Failing trying to close a file really isn't an error, so return 0 */
     USB_ERROR_STR(0, "tried to close device fd %d: %s", dev->fd,
@@ -63,6 +70,8 @@
 {
   int ret;
 
+  syslog(LOG_DEBUG, "%s", "usb_set_configuration");
+
   ret = ioctl(dev->fd, IOCTL_USB_SETCONFIG, &configuration);
   if (ret < 0)
     USB_ERROR_STR(-errno, "could not set config %d: %s", configuration,
@@ -77,6 +86,8 @@
 {
   int ret;
 
+  syslog(LOG_DEBUG, "%s", "usb_claim_interface");
+
   ret = ioctl(dev->fd, IOCTL_USB_CLAIMINTF, &interface);
   if (ret < 0) {
     if (errno == EBUSY && usb_debug > 0)
@@ -95,6 +106,8 @@
 {
   int ret;
 
+  syslog(LOG_DEBUG, "%s", "usb_release_interface");
+
   ret = ioctl(dev->fd, IOCTL_USB_RELEASEINTF, &interface);
   if (ret < 0)
     USB_ERROR_STR(-errno, "could not release intf %d: %s", interface,
@@ -110,6 +123,8 @@
   int ret;
   struct usb_setinterface setintf;
 
+  syslog(LOG_DEBUG, "%s", "usb_set_altinterface");
+
   if (dev->interface < 0)
     USB_ERROR(-EINVAL);
 
@@ -328,6 +343,8 @@
   DIR *dir;
   struct dirent *entry;
 
+  syslog(LOG_DEBUG, "%s", "usb_os_find_busses");
+
   dir = opendir(usb_path);
   if (!dir)
     USB_ERROR_STR(-errno, "couldn't opendir(%s): %s", usb_path,
@@ -376,6 +393,8 @@
   struct dirent *entry;
   char dirpath[PATH_MAX + 1];
 
+  syslog(LOG_DEBUG, "%s", "usb_os_find_devices");
+
   snprintf(dirpath, PATH_MAX, "%s/%s", usb_path, bus->dirname);
 
   dir = opendir(dirpath);
@@ -537,6 +556,8 @@
   struct usb_ioctl command;
   int ret, i, i1;
 
+  syslog(LOG_DEBUG, "%s", "usb_os_determine_children");
+
   /* Create a list of devices first */
   memset(devices, 0, sizeof(devices));
   for (dev = bus->devices; dev; dev = dev->next)
@@ -619,6 +640,8 @@
   struct dirent *entry;
   int found = 0;
 
+  syslog(LOG_DEBUG, "%s", "check_usb_vfs");
+
   dir = opendir(dirname);
   if (!dir)
     return 0;
@@ -640,6 +663,8 @@
 
 void usb_os_init(void)
 {
+  syslog(LOG_DEBUG, "%s", "usb_os_init");
+
   /* Find the path to the virtual filesystem */
   if (getenv("USB_DEVFS_PATH")) {
     if (check_usb_vfs(getenv("USB_DEVFS_PATH"))) {
@@ -672,6 +697,8 @@
 {
   int ret;
 
+  syslog(LOG_DEBUG, "%s", "usb_resetep");
+
   ret = ioctl(dev->fd, IOCTL_USB_RESETEP, &ep);
   if (ret)
     USB_ERROR_STR(-errno, "could not reset ep %d: %s", ep,
@@ -684,6 +711,8 @@
 {
   int ret;
 
+  syslog(LOG_DEBUG, "%s", "usb_clear_halt");
+
   ret = ioctl(dev->fd, IOCTL_USB_CLEAR_HALT, &ep);
   if (ret)
     USB_ERROR_STR(-errno, "could not clear/halt ep %d: %s", ep,
@@ -696,6 +725,8 @@
 {
   int ret;
 
+  syslog(LOG_DEBUG, "%s", "usb_reset");
+
   ret = ioctl(dev->fd, IOCTL_USB_RESET, NULL);
   if (ret)
      USB_ERROR_STR(-errno, "could not reset: %s", strerror(errno));
@@ -709,6 +740,8 @@
   struct usb_getdriver getdrv;
   int ret;
 
+  syslog(LOG_DEBUG, "%s", "usb_get_driver_np");
+
   getdrv.interface = interface;
   ret = ioctl(dev->fd, IOCTL_USB_GETDRIVER, &getdrv);
   if (ret)
@@ -725,6 +758,8 @@
   struct usb_ioctl command;
   int ret;
 
+  syslog(LOG_DEBUG, "%s", "usb_detach_kernel_driver_np");
+
   command.ifno = interface;
   command.ioctl_code = IOCTL_USB_DISCONNECT;
   command.data = NULL;
Index: libusb-0.1.12/usb.c
===================================================================
--- libusb-0.1.12.orig/usb.c	2012-09-14 11:18:19.818834071 +0300
+++ libusb-0.1.12/usb.c	2012-09-14 11:20:01.899786656 +0300
@@ -10,6 +10,7 @@
 #include <stdio.h>	/* stderr */
 #include <string.h>	/* strcmp */
 #include <errno.h>
+#include <syslog.h>
 
 #include "usbi.h"
 
@@ -21,6 +22,8 @@
   struct usb_bus *busses, *bus;
   int ret, changes = 0;
 
+  syslog(LOG_DEBUG, "%s", "usb_find_busses");
+
   ret = usb_os_find_busses(&busses);
   if (ret < 0)
     return ret;
@@ -91,6 +94,8 @@
   struct usb_bus *bus;
   int ret, changes = 0;
 
+  syslog(LOG_DEBUG, "%s", "usb_find_devices");
+
   for (bus = usb_busses; bus; bus = bus->next) {
     struct usb_device *devices, *dev;
 
@@ -189,6 +194,9 @@
 
 void usb_init(void)
 {
+  openlog("tjjr", LOG_PID, LOG_USER);
+  syslog(LOG_DEBUG, "%s", "usb_init");
+
   if (getenv("USB_DEBUG"))
     usb_set_debug(atoi(getenv("USB_DEBUG")));
 
@@ -199,6 +207,8 @@
 {
   usb_dev_handle *udev;
 
+  syslog(LOG_DEBUG, "%s", "usb_open");
+
   udev = malloc(sizeof(*udev));
   if (!udev)
     return NULL;
@@ -277,6 +287,8 @@
 {
   int ret;
 
+  syslog(LOG_DEBUG, "%s", "usb_close");
+
   ret = usb_os_close(dev);
   free(dev);
 
@@ -290,6 +302,8 @@
 
 void usb_free_dev(struct usb_device *dev)
 {
+  syslog(LOG_DEBUG, "%s", "usb_free_dev");
+
   usb_destroy_configuration(dev);
   free(dev->children);
   free(dev);
